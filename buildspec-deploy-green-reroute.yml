version: 0.2
env:
  variables:
  ## pass environment variables in buildspec
    ENV: production
    ECR_REPO: $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_REPO_NAME
    IMAGE_NAME: $IMAGE_REPO_NAME
    TF_VERSION: "0.14.5"
    ALB_LISTENER_ARN: $ALB_LISTENER_ARN
    GREEN_TG_ARN: $GREEN_TG_ARN
phases:
  install:
    runtime-versions:
      docker: 19
    commands:
    ## install terraform
      - "cd /usr/bin"
      - "curl -s -qL -o terraform.zip https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip"
      - "unzip -o terraform.zip"
  pre_build:
    commands:
      - terraform version
      - echo "pre_build"
      - cd ${CODEBUILD_SRC_DIR}/prod
      - terraform init
  build:
    commands:
      - terraform apply -target=module.green -auto-approve
      - |
        if [ $? != 0 ]; then
          echo "terraform apply green failed"
          exit 1
        fi
      - ./check_tg_status.sh ${GREEN_TG_ARN}
      - |
        if [ $? != 0 ]; then
          echo "green targets unhealthy"
          exit 1
        fi
      - echo "green infra created"
  post_build:
    commands:
      - cd ..
      # nofify the users with slackbot
      - |
        if [[ "$CODEBUILD_BUILD_SUCCEEDING" == "0" ]]; then
          echo 'green infra build failed';
          scripts/slack_msg.sh "green infra failed, and the current traffic is still routing to blue targets"
          exit 1;
        fi
      - scripts/slack_msg.sh "green infra created successfully, and the current traffic is still routing to blue targets"
      - cd prod
      - echo "start imporing alb listener"
      - terraform import aws_lb_listener.app ${ALB_LISTENER_ARN}
      - |
        if [ $? != 0 ]; then
            echo "alb listener import error"
            exit 1
        fi
      - echo "start route traffic to green target group"
      - terraform apply -target=aws_lb_listener.app -var 'traffic_distribution=blue-90' -auto-approve
      - echo "blue:green = 90:10"
      - terraform apply -target=aws_lb_listener.app -var 'traffic_distribution=split' -auto-approve
      - echo "blue:green = 50:50"
      - terraform apply -target=aws_lb_listener.app -var 'traffic_distribution=green-90' -auto-approve
      - echo "blue:green = 10:90"
      - terraform apply -target=aws_lb_listener.app -var 'traffic_distribution=green' -auto-approve
      - echo "100% traffic forwarding to green targets"
      - cd ..
      - scripts/slack_msg.sh "the current traffic is routing to green targets, please check"
      - cd ..
artifacts:
  files:
    - '**/*'
  base-directory: '.'
